import { Model } from '@adobe/cq-spa-page-model-manager';
import React, { Component } from 'react';
import { ComponentMapping, MappedComponentProperties } from '../ComponentMapping';
import { PlaceHolderModel } from './ContainerPlaceholder';
export interface ContainerProperties extends MappedComponentProperties {
    componentMapping?: typeof ComponentMapping;
    cqItems: {
        [key: string]: Model;
    };
    cqItemsOrder: string[];
}
export interface ContainerState {
    componentMapping: typeof ComponentMapping;
}
/**
 * Container component. Provides access to items.
 */
export declare class Container<P extends ContainerProperties, S extends ContainerState> extends Component<P, S> {
    static defaultProps: {
        cqItems: {};
        cqItemsOrder: never[];
        cqPath: string;
    };
    constructor(props: P);
    /**
     * Returns the child components of this Container.
     * It will iterate over all the items and instantiate the child components if a Mapping is found.
     * Instantiation is done my connecting the Component with the data of that item.
     *
     * @returns {Object[]} An array with the components instantiated to JSX
     */
    get childComponents(): JSX.Element[];
    /**
     * Connects a child component with the item data.
     *
     * @param {Component} ChildComponent - the child component
     * @param {Object} itemProps - the item data
     * @param {String} itemKey - the name of the item in map
     * @returns {Object} - the React element constructed by connecting the values of the input with the Component
     */
    connectComponentWithItem(ChildComponent: React.ComponentType<MappedComponentProperties>, itemProps: any, itemKey: string): JSX.Element;
    /**
     * Returns the properties to add on a specific child component.
     *
     * @param {Object} item - The item data
     * @param {String} itemKey - The key of the item
     * @param {String} itemPath - The path of the item
     * @returns {Object} - The map of properties to be added
     */
    getItemComponentProps(itemProps?: any, itemKey?: string, itemPath?: string): {
        [key: string]: string;
    };
    /**
     * Computes the path of the current item.
     *
     * @param {String} itemKey - the key of the item
     * @returns {String} - the computed path
     */
    getItemPath(itemKey: string): string;
    /**
     * The properties that will be injected in the root element of the container.
     *
     * @returns {Object} - The map of properties to be added
     */
    get containerProps(): {
        [key: string]: string;
    };
    /**
     * The properties that will go on the placeholder component root element.
     *
     * @returns {Object} - The map of properties to be added
     */
    get placeholderProps(): PlaceHolderModel;
    /**
     * The placeholder component that will be added in editing
     *
     * @returns {Object} React element to be instantiated as a placeholder
     */
    get placeholderComponent(): JSX.Element | null;
    render(): JSX.Element;
}
//# sourceMappingURL=Container.d.ts.map