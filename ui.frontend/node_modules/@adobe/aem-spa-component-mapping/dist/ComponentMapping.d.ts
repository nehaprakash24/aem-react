/**
 * ComponentMapping instance.
 * @private
 */
interface ComponentMappingObject {
    [key: string]: any;
}
/**
 * ComponentMapping singleton. It manages the mapping between AEM component resource types and corresponding
 * JavaScript component class.
 */
declare class ComponentMappingImpl {
    static mapping: ComponentMappingObject;
    static get instance(): ComponentMappingImpl;
    constructor();
    /**
     * Creates mapping for given resource type(s) and a component class.
     *
     * @param {string|array} resourceTypes - resource type(s)
     * @param {object} clazz - component class that should be associated with given resource type(s)
     *
     * @protected
     */
    map(resourceTypes: string | string[], clazz: any): void;
    static map(resourceTypes: string | string[], clazz: any): void;
    /**
     * Returns object (or undefined) matching with given resource type.
     *
     * @param {string} resourceType - resource type
     * @returns {object|undefined} - class associated with given resource type
     */
    get(resourceType: string): any | undefined;
    /**
     * Returns object (or undefined) matching with given resource type.
     *
     * @param {string} resourceType - resource type
     * @returns {object|undefined} - class associated with given resource type
     */
    static get(resourceType: string): any | undefined;
}
/**
 * Helper function that can be used to map a class to given resource type(s).
 *
 * @param {string|array} resourceTypes - resource type(s)
 * @returns {function} - function meant to map a class with the previously given resource types
 */
declare function MapTo(resourceTypes: string | string[]): (clazz: any) => void;
export { ComponentMappingImpl as ComponentMapping, MapTo };
//# sourceMappingURL=ComponentMapping.d.ts.map