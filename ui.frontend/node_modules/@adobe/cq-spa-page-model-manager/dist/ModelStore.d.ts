import { Model } from './Model';
/**
 * The ModelStore is in charge of providing access to the data model. It provides the CRUD operations over the model.
 * To protect the integrity of the data it initially returns immutable data. If needed, you can request a mutable object.
 */
export declare class ModelStore {
    private _pageContentDelimiter;
    private _data;
    private _rootPath;
    /**
     * @param {string} [rootPath]     - Root path of the model
     * @param {{}} [data]             - Initial model
     */
    constructor(rootPath: string, data?: Model);
    /**
     * Initializes the the ModelManager
     *
     * @param {string} rootPath     - Root path of the model
     * @param {{}} data             - Initial model
     */
    initialize(rootPath: string, data: Model): void;
    /**
     * Returns the current root path
     *
     * @return {string}
     */
    get rootPath(): string;
    get dataMap(): any;
    /**
     * Replaces the data in the given location
     *
     * @param {string} path     - Path of the data
     * @param {{}} newData      - New data to be set
     */
    setData(path: string, newData?: any): void;
    /**
     * Returns the data for the given path. If no path is provided, it returns the whole data
     *
     * @param {string} [path]                   - Path to the data
     * @param {boolean} [immutable=true]        - Should the returned data be a clone
     * @return {*}
     */
    getData<M extends Model>(path?: string | null, immutable?: boolean): M | undefined;
    /**
     * Insert the provided data at the location of the given path. If no sibling name is provided the data is added at the end of the list
     *
     * @param {string} path                     - Path to the data
     * @param {{}} data                         - Data to be inserted
     * @param {string|null} [siblingName]            - Name of the item before or after which to add the data
     * @param {boolean} [insertBefore=false]    - Should the data be inserted before the sibling
     */
    insertData(path: string, data: Model, siblingName?: string | null, insertBefore?: boolean): void;
    /**
     * Removes the data located at the provided location
     *
     * @param {string} path         - Path of the data
     * @return {string|null}   - Path to the parent item initially containing the removed data
     */
    removeData(path: string): string | null;
    /**
     * @private
     */
    destroy(): void;
    /**
     * Retrieves the item and eventually returns the data wrapped with the parent information
     *
     * @param {string} path                 - Path of the item
     * @param {{}} [data=_data]             - Data to be explored (must not be null!)
     * @param {{}} [parent]                 - Parent data
     * @param {string} [parentPath='']      - Path of the parent data
     * @return {ItemWrapper}
     * @private
     */
    private _findItemData;
    /**
     *
     * @param {string} pagePath - Path of the page
     *
     * @return {{}|undefined} - Data of the page
     * @private
     */
    private _getPageData;
}
//# sourceMappingURL=ModelStore.d.ts.map